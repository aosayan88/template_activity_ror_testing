# Generated by Selenium IDE
require 'selenium-webdriver'
require 'json'

# DOCU: Testcases for activity on Ruby On Rails <br>
# Last updated at: Sep 26, 2022
# @author Alfie
# Run using: bundle exec rspec ./test/spec/templates_process.test.rb
describe 'Templates Process' do
    before(:all) do
        options = Selenium::WebDriver::Chrome::Options.new(args: [ "headless", "disable-gpu", "blink-settings=imagesEnabled=false", "--window-size=1920,1080"])
        @driver = Selenium::WebDriver.for :chrome, options: options
        @driver.manage.window.maximize
        @driver.get('http://localhost:3000/')
    end
    before(:each) do
        sleep 1
    end
    after(:all) do
        @driver.quit
    end
    it 'Header template title should same as template title' do
        @driver.find_element(:id, 'template_title').send_keys(' Testing Template')
        @driver.find_element(:id, 'template_title').send_keys(:enter)
        expect(@driver.find_element(:css, '.template_header_title').text).to eq('Untitled Template Testing Template')
    end

    it 'Add Question Template' do
        @driver.find_element(:css, '.add_question_btn').click
        @expected_element = @driver.find_elements(:css, ".template_question")
        expect(@expected_element.length).to be > 2
    end

    it 'Duplicate Question Template' do
        @driver.find_element(:name, 'question[1][question_title]').click
        @driver.find_element(:name, 'question[1][question_title]').send_keys(' Test')
        @driver.find_element(:css, '.add_question_option').click
        @driver.find_element(:css, '.question_option_item:nth-child(3) > .question_option_field').send_keys('Option 3')
        @driver.find_element(:css, '.save_btn').click
        @driver.find_element(:css, '#question_id_1 .duplicate_btn_icon').click
        @driver.execute_script("window.scrollTo(0,0)")
        @expected_element = @driver.find_elements(:css, ".template_question")
        expect(@expected_element.length).to be > 2
    end

    it 'Delete Question Template' do
        @driver.find_element(:css, '#question_id_2 .delete_btn_icon').click
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.delete_modal').displayed? }
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.delete_modal_delete_btn').displayed? }
        @driver.find_element(:css, '.delete_modal_delete_btn').click
        Selenium::WebDriver::Wait.new(timeout: 10).until do
            begin
              !@driver.find_element(:css, '#question_id_2')
            rescue Selenium::WebDriver::Error::NoSuchElementError
              true
            end
        end
    end

    it 'Template Preview Title and Description should be same in templates title/description' do
        # Locate the delete modal then closed it (from previouse it)
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.delete_modal_delete_btn').displayed? }
        @driver.find_element(:css, '.delete_modal_delete_btn').click
        @driver.find_element(:id, 'template_description').click
        @driver.find_element(:id, 'template_description').send_keys('template description')
        @driver.find_element(:css, '.preview_btn').click
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.preview_modal').displayed? }
        expect(@driver.find_element(:css, '.template_header_title').text).to eq('Untitled Template Testing Template')
        expect(@driver.find_element(:css, '.carousel_template_title').text).to eq('Untitled Template Testing Template')
        expect(@driver.find_element(:css, '.carousel_template_description').text).to eq('template description')
    end

    it 'Left navigate button should be disabled in first carousel page' do
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.prev_btn_icon').displayed? }
        # Check if button is disabled
        !@driver.find_element(:css, '.prev_btn_icon').enabled?
    end

    it 'Next button should be enable when clicking option of multiple choice question' do
        @driver.find_element(:css, '.next_btn').click
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.question_option_label').displayed? }
        @driver.find_element(:css, '.preview_question_option_container:nth-child(1) > .question_option_label').click
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.preview_next_btn').enabled? }
    end

    it 'Question title should be same in the template preview question titles' do
        question_id_1 = @driver.find_element(:id, 'question_id_1')
        question_title_value = question_id_1.find_element(:css, '.question_title_field').attribute('value')
        expect(@driver.find_element(:css, '#carousel_item_id_1 .preview_question_title').text).to eq(question_title_value)
    end

    it 'Next button should be enable when input for short/paragraph answer question has value' do
        @driver.find_element(:css, '.next_btn').click
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.question_answer_text').displayed? }
        @driver.find_element(:css, '.question_answer_text').click
        @driver.find_element(:css, '.question_answer_text').send_keys('Test')
        Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.preview_next_btn').enabled? }
    end

    it 'Right navigate button should be disabled when reaching last carousel' do
        @driver.find_element(:css, '.next_btn').click
        sleep 1
        @driver.find_element(:css, '.next_btn').click
        !@driver.find_element(:css, '.next_btn').enabled?
    end

    it 'Number of template questions should be same in the template preview' do
        template_question = @driver.find_elements(:css, ".template_question")
        preview_question = @driver.find_elements(:css, ".preview_question_container")
        expect(template_question.length).to eq(preview_question)
    end

    it 'Close preview modal' do
        @driver.find_element(:css, '.preview_close_btn').click
        #Selenium::WebDriver::Wait.new(timeout: 10).until { @driver.find_element(:css, '.save_btn').displayed? }
        Selenium::WebDriver::Wait.new(timeout: 10).until do
            begin
              !@driver.find_element(:css, '.preview_modal')
            rescue Selenium::WebDriver::Error::NoSuchElementError
              true
            end
        end
    end
    
end
